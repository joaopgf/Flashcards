					Flashcard 1:

Pergunta: O que é um Controle de Versão ?

Resposta: Definição: Um sistema que registra alterações em um arquivo ou conjunto de arquivos ao longo do tempo para que versões específicas possam ser lembradas posteriormente.

					Flashcard 2:

Pergunta: O que é um Sistema de Controle de Versão (VCS)
Resposta: Definição: Uma ferramenta que permite a gestão e registro de alterações em arquivos, possibilitando a reversão para estados anteriores, comparação de mudanças, identificação de autores de modificações, entre outras funcionalidades.

					Flashcard 3:

Pergunta: Quais as Vantagens do Controle de Versão ?
Resposta: Permite reverter para estados anteriores de arquivos ou projetos.
Facilita a comparação de mudanças ao longo do tempo.
Possibilita identificar quem modificou um arquivo e quando.
Facilita a recuperação de arquivos em caso de perda ou erro.
Requer pouco esforço para implementação e uso.

					Flashcard 4:

Pergunta: O que são Sistemas Locais de Controle de Versão
Resposta: Definição: Métodos de controle de versão onde as alterações nos arquivos são registradas localmente, geralmente em um banco de dados simples, facilitando a gestão das revisões.

					Flashcard 5:

Pergunta: Por que um designer gráfico ou web designer deveria usar um sistema de controle de versão?
Resposta: Para manter todas as versões de uma imagem ou layout, possibilitando a reversão para estados anteriores, comparação de mudanças, identificação de autores de modificações e recuperação de arquivos em caso de perda ou erro.

					Flashcard 6:

Pergunta: Por que é importante configurar seu nome de usuário e endereço de e-mail ao instalar o Git?
Resposta: Cada commit no Git usa essa informação, e ela é carimbada de forma imutável nos commits que você cria.

					Flashcard 7:

Pergunta: Como você configura seu nome de usuário globalmente no Git?
Resposta: Utilize o comando: $ git config --global user.name "Fulano de Tal"

					Flashcard 8:

Pergunta: Como você configura seu endereço de e-mail globalmente no Git?
Resposta: Utilize o comando: $ git config --global user.email fulanodetal@exemplo.br

					Flashcard 9:

Pergunta: O que significa usar a opção --global ao configurar seu nome de usuário e endereço de e-mail no Git?
Resposta: Significa que o Git usará essa informação para qualquer coisa que você fizer no sistema, e você só precisa configurá-la uma vez.

					Flashcard 10:

Pergunta: Como você configura um editor de texto padrão para o Git?
Resposta: Utilize o comando: $ git config --global core.editor nome_do_editor

					Flashcard 11:

Pergunta: O que acontece se você não configurar um editor de texto padrão para o Git?
Resposta: O Git usará o editor padrão do sistema, que geralmente é o Vim.

					Flahcard 12:

Pergunta: Como você pode ver todas as configurações já feitas no git ?
Resposta: Usando o comando $ git config --list

					Flahcard 13:

Pergunta: Como você pode ver apenas uma configuração específica no git, como por ex. o nome do usuário ?
Resposta: Usando o comando $ git config <ex> // $ git config user.name

					Flahcard 14:

Pergunta: Como você pode obter um repositório no git ?
Resposta: Criando um você mesmo ou clonando um repositório já existente

					Flahcard 15:

Pergunta: Como você pode criar um repositório no git ?
Resposta: Usando o comando $ git init para iniciar um repositório e criar uma pasta chamada ".git"

					Flahcard 16:

Pergunta: Como você pode clonar um repositório no git ?
Resposta: Usando o comando: git clone [url]

					Flahcard 17:

Pergunta: O que são arquivos  rastreados ?
Resposta: arquivos que foram adicionados na última snapshot (git reconhece)

					Flahcard 18:

Pergunta: quais são os estados dos arquivos rastreados ?
Resposta: não modificado, modificado e preparados (adicionado ao stage)

					Flahcard 19:

Pergunta: Qual comando pode ser usado para verificar os status dos arquivos ?
Resposta: Usando o comando: git status

					Flahcard 20:

Pergunta: Como você pode começa a rastrear um arquivo novo ?
Resposta: Usando o comando: git add <nome do arquivo>

					Flahcard 21:

Pergunta: O que acontece quando você usa o comando git add ?
Resposta: O git começa a rastrear o arquivo no diretório. O comando git add recebe o caminho de um arquivo ou de um diretório. Se for um diretório, o comando adiciona todos os arquivos contidos nesse diretório recursivamente.

					Flahcard 22:

Pergunta: Além de rastrear arquivos, qual outros propósitos do comando git add ?
Resposta: O comando git add serve para começar a rastrear arquivos e também para outras coisas, como marcar arquivos que estão em conflito de mesclagem como resolvidos. Pode ser útil pensar nesse comando mais como “adicione este conteúdo ao próximo commit”.

					Flahcard 23:

Pergunta: O que acontece quando você adiciona um arquivo ao stage mas o altera depois ?
Resposta: O arquivo irá aparecer na área de stage e na área de arquivos que não foram adicionados ao stage, isso ocorre porque quando se usa git add o git adiciona ao stage o arquivo do jeito que ele está, para resolver isso basta usar o comando de git add novamente no arquivo.

					Flahcard 24:

Pergunta: Como se pode ver os status do git de forma curta ?
Resposta: usando o comando git status -s ou git status --short.
ex:
$ git status -s
M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt

					Flahcard 25:

Pergunta: O que significa cada símbolo no status curto do git ?
Resposta: ?? = arquivos novos não rastreados
          A = novos arquivos que foram adicionados à área de stage
	      M= arquivos modificados
	      MM = O arquivo foi modificado, foi para o stage e foi modificado de novo, de maneira que há alterações para ele tanto no estado preparado quanto no estado não-preparado.

                    Flahcard 26:

Pergunta: Como se pode ver os status do git de forma curta ?
Resposta: usando o comando git status -s ou git status --short.
					Flashcard 1:

Pergunta: O que é um Controle de Versão ?

Resposta: Definição: Um sistema que registra alterações em um arquivo ou conjunto de arquivos ao longo do tempo para que versões específicas possam ser lembradas posteriormente.

					Flashcard 2:

Pergunta: O que é um Sistema de Controle de Versão (VCS)
Resposta: Definição: Uma ferramenta que permite a gestão e registro de alterações em arquivos, possibilitando a reversão para estados anteriores, comparação de mudanças, identificação de autores de modificações, entre outras funcionalidades.

					Flashcard 3:

Pergunta: Quais as Vantagens do Controle de Versão ?
Resposta: Permite reverter para estados anteriores de arquivos ou projetos.
Facilita a comparação de mudanças ao longo do tempo.
Possibilita identificar quem modificou um arquivo e quando.
Facilita a recuperação de arquivos em caso de perda ou erro.
Requer pouco esforço para implementação e uso.

					Flashcard 4:

Pergunta: O que são Sistemas Locais de Controle de Versão
Resposta: Definição: Métodos de controle de versão onde as alterações nos arquivos são registradas localmente, geralmente em um banco de dados simples, facilitando a gestão das revisões.

					Flashcard 5:

Pergunta: Por que um designer gráfico ou web designer deveria usar um sistema de controle de versão?
Resposta: Para manter todas as versões de uma imagem ou layout, possibilitando a reversão para estados anteriores, comparação de mudanças, identificação de autores de modificações e recuperação de arquivos em caso de perda ou erro.

					Flashcard 6:

Pergunta: Por que é importante configurar seu nome de usuário e endereço de e-mail ao instalar o Git?
Resposta: Cada commit no Git usa essa informação, e ela é carimbada de forma imutável nos commits que você cria.

					Flashcard 7:

Pergunta: Como você configura seu nome de usuário globalmente no Git?
Resposta: Utilize o comando: $ git config --global user.name "Fulano de Tal"

					Flashcard 8:

Pergunta: Como você configura seu endereço de e-mail globalmente no Git?
Resposta: Utilize o comando: $ git config --global user.email fulanodetal@exemplo.br

					Flashcard 9:

Pergunta: O que significa usar a opção --global ao configurar seu nome de usuário e endereço de e-mail no Git?
Resposta: Significa que o Git usará essa informação para qualquer coisa que você fizer no sistema, e você só precisa configurá-la uma vez.

					Flashcard 10:

Pergunta: Como você configura um editor de texto padrão para o Git?
Resposta: Utilize o comando: $ git config --global core.editor nome_do_editor

					Flashcard 11:

Pergunta: O que acontece se você não configurar um editor de texto padrão para o Git?
Resposta: O Git usará o editor padrão do sistema, que geralmente é o Vim.

					Flashcard 12:

Pergunta: Como você pode ver todas as configurações já feitas no git ?
Resposta: Usando o comando $ git config --list

					Flashcard 13:

Pergunta: Como você pode ver apenas uma configuração específica no git, como por ex. o nome do usuário ?
Resposta: Usando o comando $ git config <ex> // $ git config user.name

					Flashcard 14:

Pergunta: Como você pode obter um repositório no git ?
Resposta: Criando um você mesmo ou clonando um repositório já existente

					Flashcard 15:

Pergunta: Como você pode criar um repositório no git ?
Resposta: Usando o comando $ git init para iniciar um repositório e criar uma pasta chamada ".git"

					Flashcard 16:

Pergunta: Como você pode clonar um repositório no git ?
Resposta: Usando o comando: git clone [url]

					Flashcard 17:

Pergunta: O que são arquivos  rastreados ?
Resposta: arquivos que foram adicionados na última snapshot (git reconhece)

					Flashcard 18:

Pergunta: quais são os estados dos arquivos rastreados ?
Resposta: não modificado, modificado e preparados (adicionado ao stage)

					Flashcard 19:

Pergunta: Qual comando pode ser usado para verificar os status dos arquivos ?
Resposta: Usando o comando: git status

					Flashcard 20:

Pergunta: Como você pode começa a rastrear um arquivo novo ?
Resposta: Usando o comando: git add <nome do arquivo>

					Flashcard 21:

Pergunta: O que acontece quando você usa o comando git add ?
Resposta: O git começa a rastrear o arquivo no diretório. O comando git add recebe o caminho de um arquivo ou de um diretório. Se for um diretório, o comando adiciona todos os arquivos contidos nesse diretório recursivamente.

					Flashcard 22:

Pergunta: Além de rastrear arquivos, qual outros propósitos do comando git add ?
Resposta: O comando git add serve para começar a rastrear arquivos e também para outras coisas, como marcar arquivos que estão em conflito de mesclagem como resolvidos. Pode ser útil pensar nesse comando mais como “adicione este conteúdo ao próximo commit”.

					Flashcard 23:

Pergunta: O que acontece quando você adiciona um arquivo ao stage mas o altera depois ?
Resposta: O arquivo irá aparecer na área de stage e na área de arquivos que não foram adicionados ao stage, isso ocorre porque quando se usa git add o git adiciona ao stage o arquivo do jeito que ele está, para resolver isso basta usar o comando de git add novamente no arquivo.

					Flashcard 24:

Pergunta: Como se pode ver os status do git de forma curta ?
Resposta: usando o comando git status -s ou git status --short.
ex:
$ git status -s
M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt

					Flashcard 25:

Pergunta: O que significa cada símbolo no status curto do git ?
Resposta: ?? = arquivos novos não rastreados
          A = novos arquivos que foram adicionados à área de stage
	      M= arquivos modificados
	      MM = O arquivo foi modificado, foi para o stage e foi modificado de novo, de maneira que há alterações para ele tanto no estado preparado quanto no estado não-preparado.

                    Flashcard 26:

Pergunta: Como se pode ver os status do git de forma curta ?
Resposta: usando o comando git status -s ou git status --short.

                    Flashcard 27:

Pergunta: Como se pode ignorar arquivos ?
Resposta: criando um arquivo chamado .gitignore, contendo uma lista de padrões de nomes de arquivo que devem ser ignorados

                    Flashcard 28:

Pergunta: explique a legenda deste exemplo de git ignore:
$ cat .gitignore
*.[oa]
*~
Resposta: A primeira linha diz ao Git para ignorar todos os arquivos que terminem com “.o” ou “.a” – arquivos objeto ou de arquivamento, que podem ser produtos do processo de compilação. A segunda linha diz ao Git para ignorar todos os arquivos cujo nome termine com um til (~)

                    Flashcard 29:

Pergunta: Quais as regras para os padrões que podem ser usados no arquivo .gitignore ?
Resposta: Linhas em branco ou começando com # são ignoradas.

          Os padrões que normalmente são usados para nomes de arquivos funcionam.

          Você pode iniciar padrões com uma barra (/) para evitar recursividade.

          Você pode terminar padrões com uma barra (/) para especificar um diretório.

          Você pode negar um padrão ao fazê-lo iniciar com um ponto de exclamação (!).

                    Flashcard 30:

Pergunta: Quais outros exemplo do .gitignore ?
Resposta: # ignorar arquivos com extensão .a
          *.a

          # mas rastrear o arquivo lib.a, mesmo que você esteja ignorando os arquivos .a acima
          !lib.a

          # ignorar o arquivo TODO apenas no diretório atual, mas não em subdir/TODO
          /TODO

          # ignorar todos os arquivos no diretório build/
          build/

          # ignorar doc/notes.txt, mas não doc/server/arch.txt
          doc/*.txt

          # ignorar todos os arquivos .pdf no diretório doc/
          doc/**/*.pdf
	
					Flashcard 31:

Pergunta: Qual seria a definição de patch ?
Resposta: As linhas que foram adicionadas e removidas

					Flashcard 32:

Pergunta: Como ver os status de forma mais detalhada ?
Resposta: Usando o comando git diff

					Flashcard 33:

Pergunta: Como se pode ver as alterações que foram mandadas para o stage e que entrarão no próximo commit, comparando as alterações que estão no stage com o último commit ?
Resposta: Usando o comando git diff --staged ou git diff --cached.

					Flashcard 34:

Pergunta: Como commitar com descrição no git ?
Resposta: usando o comando git commit -m "mensagem".

					Flashcard 35:

Pergunta: Como mandar para o stage todos os itens modificados ?
Resposta: usando o comando git commit -a ou git add . .

					Flashcard 36:

Pergunta: O que acontece se você simplesmente remover o arquivo do seu diretório  ?
Resposta: Ele aparecerá sob a área “Changes not staged for commit” (isto é, fora do stage) da saída do git status.

					Flashcard 37:

Pergunta: Como se remove um arquivo do git ?
Resposta: usando o comando git rm e depois fazendo um commit .

					Flashcard 38:

Pergunta: Como manter o arquivo no diretório de trabalho, mas removê-lo da sua área de stage. Em outras palavras, como manter o arquivo no disco rígido, mas não deixá-lo mais sob controle do Git ?
Resposta: usando o comando git rm --cached <ex: README>.

					Flashcard 39:

Pergunta: O que este comando irá fazer ao ser executado: $ git rm log/\*.log ?
Resposta: Esse comando remove todos os arquivos que tenham a extensão .log do diretório log/.

					Flashcard 40:

Pergunta: Qual comando que irá remover todos os arquivos cujos nomes terminem com um ~ ?
Resposta: git rm \*~

					Flashcard 41:

Pergunta: Como renomear um arquivo no git ?
Resposta: Usando o comando git mv arq_origem arq_destino

					Flashcard 42:

Pergunta: Como ver o histórico de commits feitos no repositório em ordem cronológica inversa; isto é, o commit mais recente aparece primeiro ?
Resposta: Usando o comando git log.

					Flashcard 43:

Pergunta: Como ver as diferenças introduzidas em cada commit ?
Resposta: Usando o comando git log -p

					Flashcard 44:

Pergunta: Como ver as diferenças introduzidas nos últimos n commits ?
Resposta: Usando o comando git log -p -n


p{
    font-family: Arial;
    color: blue;
}
p = seletor
 font-family: Arial; = declaração
 color: = propriedade
 blue; = valor

            Existem 3 tipos de CSS:
CSS Inline: Usado dentro da tag, tem maior poder, mas só funciona na tag em que está
CSS interno ou local: Usado dentro da tag style no head, tem poder intermediário e funciona apenas na página HTML em que está
CSS Externo: Fica em um arquivo externo, tem poder baixo mas funciona em qualquer HTML que esteja conectado com ele.

            Existem 4 formas de se colocar cores em CSS
Por nome: apenas digitando o nome da cor
Por código hexadecimal(0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f): #000000 - vai de 00 até ff
Por RGB(Red, Green, Blue): 0, 0, 0 - vai de 000 até 255
Por HSL (Hue, Saturation, Lightness): 0, 0%, 0% - vai de 0 a 360 e 0% a 100%
Se houver mudança da opacidade o RGB e HSL ganharão a letra a (alpha), que indica a opacidade - vai de 0.000 até 1

            Paletas de cores tem de 3 a 5 cores (média é 4, desconsidera branco e preto)

            Existem 5 categorias de fontes:
Serifadas = Tem Serifas, boa para leitura em papel
Sans-serif = sem serifa, boa para leitura digital
monoespaçadas = letras ocupam o mesmo espaço
handwriting = simula escrita a mão
display = letras diferentes, símbolos, emojis etc.

            combinações seguras:
Para slecionar fontes diferentes use as combinações seguras(safe combinations), que são 2 fontes + uma palavra genérica, por ex.:
font-family: Arial, Helvetica, sans-serif;
palavras genéricas podem ser serif, sans-serif, monospace etc.

            Peso de fontes:
Fontes possuem o parado weight(peso) que são: light, normal, bold e bolder ou números de 100 a 900. Isso regula a "Grossura" da fonte

            Medidas em fontes:
Fontes também possuem medidas:
Medidas absolutas:
mm, cm, in(polegadas), px(pixels), pt(pontos),pc(paica)
pt e pc é recomendável para papel e não recomendável para digital

Medidas relativas:
em(medida relativa ao tamanho da fonte), ex(relativo a altura x de uma fonte), rem,vw(viewwidth)(referente a largura do viewport),vh (referente a altura do viewport), %
16 px geralmente é igual a 1 em.
            W3C recomenda usar apenas em e px.

            shorthands:
Há um atalho para as configurações de fonte que é a shorthand (mãozinha), ela condensa as 4 configurações font-style + font-weight + font-size + font-family
ex.: font: italic bolder 3em sans-serif;

            Há 2 maneiras de se colocar fontes no CSS
Fontes por link:
@import url('URL do site');
ex.:
@import url('https://fonts.googleapis.com/css2?family=MedievalSharp&display=swap');
        
        body{
            font-family: MedievalSharp;
            font-size: 16px;
            color: black;
        }


Fontes locais:
@font-face {
            font-family:'nome que você quiser' ;
            src: url('local do arquivo') format('formato do aquivo');
        }

ex.:
@font-face {
            font-family: 'love';
            src: url('fonts/love larry.otf') format('opentype'), url('fonts/love\ larry.ttf') format('truetype');
            font-weight: normal;
            font-style: normal;
        }


            Fontes possuem alguns tipos de formatos:
Tipos de format()
-opentype(otf)
-truetype(ttf)
-embedded-truetype
-truetype-aat(Apple Advanced Typography)
-svg

            Como colocar degradê:
body{
            background-image: linear-gradient(to top/right/bottom/left, #6D59C0, #3fccb0, #B93590, #E33F5F, #FDD579 ); (pode usar como cor 'transparent')
            background-attachment: fixed;
        }

            text-align = alinhamento do texto 
            text-indent = espaço no começo do parágrafo

            Id e classe:
HTML id -> CSS #
HTML class -> CSS .
: -> pseudo classe (relacionada ao estado do objeto ex.: hover)
:: -> pseudo-elemento
> -> filho (objeto dentro de outro ex.: div contendo um p)

            BOXS
Altura da caixa: height
Largura da caixa: width
Contorno: border
Espaço entre o conteúdo e borda: padding
Espaço fora da borda: margin
Espaço entre borda e margem: outline
block-level: Se inicia em uma nova linha (quebra linha) e ocupa a largura toda da tela 
inline-level: Se inicia ao lado do último elemento e ocupa uma largura de acordo com o conteúdo 

            Exs. de block-level

address
div
h1-6
p
blockquote
canvas
dd
dl
dd 
fieldset
figcaption
figure
hr
li
noscript
ol
ul
pre 
tfoot
table
section 
main 
header 
nav 
article
aside
footer
form 
video 

            Exs. de inline-level:

span
abbr
acronym
b 
bdo 
br
button
cite
a 
dfn 
i 
img
kbd
map 
object
q 
samp 
script 
textarea
tt 
var
code 
small 
strong
em 
sup 
sub 
label
button 
input 
output
select 

            Grouping tags:

header = cabeçalho, pode ser o cabeçalho principal do site ou de um artigo/seção.  Normalmente tem títulos (h1-6) e subtítulos, pode ter também menus de navegação.

nav = área que tem links de navegação, pode estar dentro do header.

main = Agrupador usado para delimitar o conteúdo principal do site. Normalmente concentra seções, artigos e conteúdos periféricos.

section = Cria seções para a página, pode conter o conteúdo diretamente no seu corpo ou dividi-los en artigos com conteúdos específicos. Segundo a W3C: "Uma seção é um agrupamento temático de conteúdos, tipicamente com um cabeçalho."

article = contêm um conteúdo que pode ser lido de forma independente e diz respeito a um mesmo assunto, pode ser usado para delimitar posts, blogs, fóruns etc.

aside = Delimita um conteúdo periférico e complementar ao conteúdo principal de um artigo ou seção. normalmente está posicionado ao lado de um determinado texto ou no meio dele, tem múltiplos níveis.

footer = cria um rodapé para o site todo, seção ou artigo. É um conteúdo que não faz parte diretamente do conteúdo nem do conteúdo periférico, porém possui informações sobre autoria do conteúdo, links adicionais, mapa do site, documentos relacionados etc.


            USER AGENT: navegador aplicando configurações padrão

            É recomendado usar o padding e margin na ordem: top, right, bottom e left

            Quando o elemento é do tipo caixa, use (margin: auto;) para centralizar o conteúdo

            Shorthands de border, padding, margin e outline:

border:
border-width: 10px;
border-style: solid;
border-color: aqua; -> border: 10px solid aqua;
outline é igual a border !

padding:
padding-top: 10px ;
padding-right: 10px ;
padding-bottom: 10px ;
padding-left: 10px; -> padding: 10px 10px 10px 10px; = padding:10px; (Se houver apenas 1 medida ela poderá servir para os 4  lados. Se hpuver 2 medidas a primeira será de cima e baixo e a segunda será dos lados)

Margin e border-radious são iguais ao padding !

Outro Ex.:
margin:20px auto 40px auto; assim você pode centralizar a box

            É possível mudar um conteúdo de block-level usando o parâmetro (display: inline;) e vice-versa com (display: block;)

            É possível colocar bordas a partir de imagens:
border: 22px solid black;
            
border-image-source: url('link da imagem');
border-image-slice: 27;
border-image-repeat: repeat;
shorthand:
border-image: url('link') 27 repeat;

            Tamanho total de uma caixa = conteúdo + preenchimento + borda + margem (Contorno ja utiliza medida da margem)

            Como centralizar uma imagem:
Na tag img configure:
display: block;
border: auto;

Ou 

Coloque a tag img dentro de uma div 
na tag da div configure:
text-align: center;

            Como arredondar vértices:
border-radious: px;
É possóvel configurar entre 1, 2 e 4 medidas.
border-bottom-left-radius: ;
border-bottom-right-radius: ;
border-top-right-radius: ;
border-top-left-radius: ;

            Configurações globais:
Use asterisco * para fazer configurações globais

            Como deixar um site responsivo ?
Use:
Max-width
Min-width
Max-hight
Min-hight
Magin: auto;
Em imagens use width: 100%;
Use a tag picture e src media para deixar imagens mais responsivas de acordo com o tamanho da tela

            Usando root:
Ex. de root:
:root{
    --cor0: #ebe5c5; 
    --cor1: #83e1ad;
    --cor2: #3ddc84;
    --cor3: #2fa866;
    --cor4: #1a5c37;
    --cor5: #063d1e;

    --fonte-padrao: Arial, Verdana, Helvetica, sans-serif;
    --fonte-destaque: 'Bebas Neue', cursive;
    --fonte-android: 'Android', cursive;
}

            Colocando os números e símbolos das listas dentro do container:
list-style-position: inside;

            Fazendo listas se "espalharem" pelo container:
columns: ;


            Colocando símbolos nas listas:
list-style-type: '\código';
Dica:\00A0 = espaço
Não é compatível com todo navegador

            É possível usar magens negativas para utilizar mais opções de desing, Ex.:
aside{
    background-color: var(--cor1);
    padding: 10px;
    border-radius: 10px;
}
aside h3{
    margin: -10px -10px 0px -10px;
    border-radius: 10px 10px 0px 0px;
    background-color: var(--cor4);
    color: white;
    padding: 10px;
}
Juntar o h3 no topo do aside

            Para colocar uma imagem de fundo use background-image + url, ex.:
background-image: url('imagens/wallpaper002.jpg');

            O background-image também possui algumas funções:
background-size: 1495px 712px; - define o tamanho da imagem de fundo
contain = faz a imagem preencher todo o fundo sem cortes (imagem fica 100% exibida)
cover = faz a imagem de fundo preencher a tela toda fazendo cortes quando necessário
auto = faz o navegador tentar colocar a imagem toda no fundo
background-repeat: ; - controla o padrão de repetição da imgem, ex.:
repeat: é usado por padrão, faz a imagem ficar repetindo
no-repeat: faz com que a imagem não fique se repetindo
repeat-x: faz a imagem se repetir no eixo x
repeat-y: faz a imagem se repetir no eixo y
background-attachment: ; = faz um vínculo com a imagem de fundo
scroll = conteúdo rola junto com a barra de scroll (padrão)
fixed = fundo fica fixo e só o conteúdo rola para baixo

            Shorthand background
color, image, position, repeat, size, attachment // OBS.: background size não funciona na shorthand

            Configurando conteúdos entre elementos dentro de outros elementos
Ex.: 
    <section id="container">
        <article id="conteudo">

        </article>
    </section>

            Centralizando conteúdos na tela:
o container tera position: relative; enquanto o conteudo terá position: absolute;
com isso, o conteudo poderá configurar o left: (ex.: px ou %) ; e top: ;, porém o ponto de referência será o topo da esquerda, caso queira consertar, use transform: translate(px ou % por ex. , );, primeiro valor: positivo vai para direita, negativo para a esquerda, segundo valor: positivo vai para baixo e negativo para cima.
exemplo de uso para centralizar conteudo dentro do container:

#container {
            background-image: url('imagens/target001.png');
            background-size: 100% 100%;
            position: relative;
            height: 500px;
            padding: 10px;
            background-color: purple;
        }

        #conteudo {
            background-image: url('imagens/target001.png');
            background-size: 100% 100%;
            position: absolute;
            height: 200px;
            width: 400px;
            background-color: yellow;
            margin: auto;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }


        Use text-transform para modificar o texto:
lowercase: deixa todas as letras em caixa baixa
uppercase: deixa todas as letras em caixa alta.

            Use line-height para espaçar uma linha da outra.

            Como fazer efeito paralax com imagem de fundo:
backgorind-attachment: fixed;

            border-collapse:
border-collapse: collapse; = faz com que os elementos da tabela fiquem "colados", sem espaço entre eles 
border-collapse: separate; = configuração padrão, os elementos tem um espaçamento entre si

            Alinhamento horizontal:
text-align: left (padrão), center, right

            Alinhamento vertical:
vertical-algin: top, middle(padrão), bottom

            Transições:
transition-duration: ;
transition: transform .5s;

            Configurando barra de rolagem:
Ex. para esconde-lá:
::-webkit-scrollbar {
    width: 0px;
    height: 0px;
}

            Dica para bordas redondas:
Use overflow: hidden; para fazer com que todo conteúdo vazado de uma div por ex. fique com a borda redonda ex.:
#login {
    position: absolute;
    top: 50%;
    left: 50%;
    transform:translate(-50%, -50%) ;
    background-color: white;
    width: 250px;
    height: 500px;
    border-radius: 20px;
    overflow: hidden;
}

#imagem {
    background: #5f2c82 url('../imagens/metal.jpg') no-repeat;
    background-size: cover;
    height: 200px;
}
Assim, a borda continuará redonda.

            Personalizando inputs por tipo:
form > input[type=submit]:hover {
    background-color: #2d6462;
}

            Mais configurações de input:
.campo > input:focus-within{
    background-color: white;
}
Quando o campo do input for selecionado para digitar algo acontecerá.

            Flex-box:
As flex-box assumem as formas que forem necessárias, para serem feitas é preciso de um "pai" e os "filhos", ex.:
.conteiner {
            background-color: lightsalmon;
            display: flex;
        }

        .item {
            background-color: lightskyblue;
            border: 1px solid black;
            flex: auto;
        }

        Direções e eixos em flex-box:
Toda flex-box possúi eixos e direções, por padrão a direção será row.
flex-direction: ;
direções:
row: da esquerda para a direita.
row-reverse: da direita para a esquerda.
column: de cima para baixo.
column-reverse: de baixo para cima.
Os eixos serão o main-axis que segue o sentido da flex-direction, e o cross-axis, que cruza o eixo principal em 90º
Além disso, cada eixo possúi respectivamente o main-start, main-end e cross-start e cross-end.

            O encolhimento de itens dentro de uma flex-box irá depender do conteúdo do "filho".

            flex-wrap: empacotamento/encapsulamento
Por padrão o flex-wrap é nowrap.
flex-wrap: ;
nowrap: quando a flex-box/ conteiner "pai", encolhe, os "filhos" irão encolher.
wrap: quando a flex-box/ conteiner "pai", encolhe, os "filhos" irão no sentido do eixo transversal/ cross-axis
wrap-reverse: quando a flex-box/ conteiner "pai", encolhe, os "filhos" irão no sentido oposto do eixo transversal/ cross-axis

            shorthand de flex:
flex-direction: row;
flex-wrap: wrap-reverse;

flex-flow: row wrap-reverse;

            Alinhando conteúdos em flex-box:
Use justify-content: ; 

flex-start: o primeiro item fica no main start do main axis.
flex-end: o último item fica no main end do main axis.
center: centraliza os itens.
space-between: o primeiro item fica no main start, o último no main end, e os outros itens ficam centralizados com espaçamento igual entre si.
space-evenly: Todos os itens ficam com espaçamento igual entre si.
space-around: divide o conteiner "pai" em partes iguais á quantidade de itens e depois centraliza os itens em cada parte. ex.: uma flex-box terá 3 itens dentro dela, então ela irá dividir 3 espaços iguais, colocar cada item nesses espaços e centralizá-los.

use align-items: ; 

stretch (padrão): Os itens se esticam junto com a flex-box
flex-start: Os itens ficam no cross start do cross axis.
flex-end: Os itens ficam no cross end do cross axis.
center: Os itens ficam centralizados.

use align-content: ; (alinhamento de itens quando a flex-box quebra)
stretch (padrão): quando a flex-box quebra, estica os itens.
flex-start:  quando a flex-box quebra, coloca os ites no cross start sem esticá-los e deixando um espaço em branco.
flex-end:  quando a flex-box quebra, coloca os ites no cross end sem esticá-los e deixando um espaço em branco.
center: cria espaços em branco no cross start e cross end e centraliza os itens.
space-between: o primeiro item fica no cross start, o último no cross end, e os outros itens ficam centralizados com espaçamento igual entre si.
space-evenly: Todos os itens ficam com espaçamento igual entre si.
space-around: divide o conteiner "pai" em partes iguais e depois centraliza os itens em cada parte sem esticá-los.


            justify-content = alinha no eixo principal
            align-items = alinha no eixo transversal
            align-content = alinha no eixo transversal quando os itens estão empacotados (wrap)

            Exemplo de configurações padrão:
 * {
            margin: 0px;
            padding: 0px;
            box-sizing: border-box;
        }

            Centralizando itens com flex-box:
No conteiner "pai" faça as seguintes configurações:
main {
            display: flex;
            justify-content: center;
            align-items: center;
        }

            Order:
Todos os itens dentro de uma flex-box possúi como padrão o parâmetro order: 0; isso é a ordem em que os itens aparecerão, quanto menor o valor da order, mais próximo do começo o item fica e vice-versa

            Align-self:
É usado em "filhos" no flex-box:
align-self: ;
auto/inherit: herda configurações de alinhamento do "pai"
flex-start: se alinha no cross start
flex-end: se alinha no cross end
center: centraliza com base no cross axis
stretch: se estica
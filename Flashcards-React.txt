                  Criando um arquivo React:
Dentro de uma pasta abra um terminal integrado, nele digite npx create-react-app nome do app
Dê enter e espere os arquivos serem baixados.
Após isso, de o comando: cd .\nome do app criado\
E depois: npm start

                  Dica:
Separe por comentários as áreas de exportações e hooks, ex.: //style  //componentes etc...
Use o devtools para ver se há algum erro

                  Criando componentes:
Na pasta src crie uma pasta para os componentes, de preferência chamada "components"
Dentro da pasta components crie os componentes usando camel-case e formato js ex.:   FirstComponent.js
No arquivo crie o componente que desejar e no final exporte ele usando: export default NomeComponente;
Após isso, no app.js, importe o componente que quiser usando: import NomeComponente from './pasta/NomeComponente' 
Ex.: import FirstComponent from './components/FirstComponent'
Para usar o componente criado use ele em forma de tag com fechamento ex.: <FirstComponent />

            Adicionando imagens pela pasta public:
Coloque uma imagem na pasta public, após isso, você pode ir no app.js e usar essa imagem com o link de /nome da imagem ex.: <img src="/img1.jpg" alt="paisagem" />

            Adicionando imagens por importação:
Na pasta src crie uma pasta chamada assets e coloque a imagem nela, após isso importe a imagem. Ao usa-lá, crie a tag imagem e no parâmetro src coloque {nome imagem} ex.:
import city from './assets/city.jpg';
{/*Imagem em src/assets*/}
      <div>
       <img src={city} alt="cidade" />
      </div>

                  Renderizando listas:

Para renderizar listas é preciso definir uma key para cada item dela, há duas formas de fazer isso:
import { useState } from "react";

const ListRender = () => {
    const [list] = useState(["João", "Pedro", "Matias","Isadora"]);
    const [users] = useState([
      {id: 15975, name: "João", age: 19},
      {id: 156516, name: "Isadora", age: 18},
      {id: 789421, name: "Pedro", age: 30},
    ]);

  return (
    <div>
        <ul>
            {list.map((item, i) => (
                <li key={i}>{item}</li>
            ))}
        </ul>

        <ul>
          {users.map((user) =>(
            <li key={users.id}>
              {user.name} - {user.age}
            </li>
          ))}
        </ul>
    </div>
  )
}

                  props é um dado passado do elemento pai para o elemento filho:
Há 3 maneiras de fazer isso:
Maneira direta: na própria tag no componente defina o prop.
<ShowUserName name="João"/>
Variável: no app.js defina uma variável lá e depois passe para a tag:
const name = "Isadora"
<ShowUserName name={name}/>
State: defina uma variável com state:
const [userName] = useState("Maria");
<ShowUserName name={name}/>

